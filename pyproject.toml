[tool.black]
line-length = 119
skip-string-normalization = true
target-version = ['py39']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | plana\/settings
    | plana\/apps\/associations\/migrations
    | plana\/apps\/commissions\/migrations
    | plana\/apps\/contents\/migrations
    | plana\/apps\/documents\/migrations
    | plana\/apps\/groups\/migrations
    | plana\/apps\/institutions\/migrations
    | plana\/apps\/projects\/migrations
    | plana\/apps\/users\/migrations
    | fabfile
    | _build
    | buck-out
    | build
    | dist
  )/
  | manage.py
  | tox.ini
  | .coveragerc
                     # the root of the project
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.poetry]
name = "plana"
version = "1.2.3"
description = ""
authors = ["DIP - Université de Strasbourg <dnum-dip@unistra.fr>"]
license = "GPL-3.0-or-later"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
bump = false
#style = "semver"
# pattern = "(?P<base>\\d+(\\.\\d+)*)"
pattern = "default-unprefixed"
format-jinja = """
    {%- if distance == 0 -%}
      {#- conserver les tags -#}
      {{ serialize_semver(base, pre=[stage~revision|d('',true)] if stage else None) }}
    {%- elif branch is none -%}
      {{ version.bump() }}
    {%- elif branch is in [ 'develop', 'dev' ] -%}
      {#- version de dev incrémentée avec nb commits -#}
      {%- set version = version.bump() -%}
      {{ serialize_semver(version.base, pre=['dev', distance]) }}
    {%- elif branch is in [ 'main', 'master' ] -%}
      {#- version de prod incrémentée (d>0) avec nb commits et stage (beta,rc…) du dernier tag -#}
      {%- set version = version.bump() -%}
      {{ serialize_semver(version.base, pre=['pre'~distance if version.stage is none else version.stage~version.revision|d('',true)], metadata=['r'~distance] if version.stage is not none else []) }}
    {%- elif branch.startswith('release/') or branch.startswith('hotfix/') -%}
      {#- version de support incrémentée (d>0) avec stage (beta,rc…) du dernier tag -#}
      {%- set version = version.bump() -%}
      {%- if branch.split('/',1)[-1].replace('x',base.rpartition('.')[-1]) != base -%}
        {%- set release = version.parse(branch.split('/',1)[-1].replace('x','0')) -%}
        {%- set version = version.parse('v'+release.base+'-'+release.stage|d('hf' if branch.startswith('hotfix/') else 'rc',true)~release.revision|d('0',true)+'+d'~distance+'.g'~commit+'.dirty' if dirty else '') -%}
      {%- endif -%}
      {{ serialize_semver(version.base, pre=[version.stage~version.revision|d('',true)] if version.stage is not none else [], metadata=[distance]) }}
    {%- else -%}
      {#- version de branche de feature incrémentée et nommée -#}
      {%- if branch.startswith('bugfix/') -%}
        {%- set branch = branch.removeprefix('bugfix/') -%}
        {%- set stage = 'post' -%}
      {%- else -%}
        {%- set base = bump_version(base) -%}
        {%- set branch = branch.removeprefix('feature/') -%}
        {%- set stage = 'dev' -%}
      {%- endif -%}
      {%- set feature_escaped = branch.translate(''.maketrans('/ ','--')).strip('-') -%}
      {#- serialize_semver(base, pre=[stage,distance], metadata=[feature_escaped]) -#}
      {{ base~'-'~stage~'.'~distance~'+'~feature_escaped }}
    {%- endif -%}
"""
#latest-tag = true

[[tool.poetry.source]]
name = "GitLab django-allauth-cas"
url = "https://git.unistra.fr/api/v4/projects/43157/packages/pypi/simple"
priority = "supplemental"

[[tool.poetry.source]]
name = "GitLab britney"
url = "https://git.unistra.fr/api/v4/projects/43267/packages/pypi/simple"
priority = "supplemental"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry.dependencies]
python = ">=3.9,<3.13"
django = "<5.0"
cryptography = "^43.0.1"
django-allauth = "^65.0.2"
allauth_cas = "^1.0.3"
django-cleanup = "^9.0.0"
django-cors-headers = "^4.5.0"
django-environ = "^0.11.2"
django-extensions = "^3.2.3"
django-health-check = "^3.18.3"
django-storages = {extras = ["boto3"], version = "1.14.3"} # 1.14.4 triggers an error on django-health-check
django-summernote = "<0.9"
django-thumbnails = "^0.8.0"
djangorestframework = "^3.15.2"
djangorestframework-camel-case = "^1.4.2"
djangorestframework-simplejwt = "^5.3.1"
dj-rest-auth = "^6.0.0"
drf-spectacular = "^0.27.2"
britney = "^0.5.4"
jsonschema = "^4.23.0"
openpyxl = "^3.1.5"
psycopg = {extras = ["binary"], version = "^3.2.3"}
pyrage = "^1.2.1"
referencing = "^0.35.1"
setuptools = ">=65.5.1"
urllib3 = "<2.0" # needed to avoid dependency problems when updating boto3 and botocore
weasyprint = "^62.3"
zxcvbn = "^4.4.28"

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
coverage = "^7.6.3"
django-debug-toolbar = "^4.4.6"
pre-commit = "^3.8.0"
pylint = "^3.3.1"
pylint-django = "^2.6.1"
safety = "^3.2.8"
sentry-sdk = "^2.16.0"
tox = "<4.12" # needed to avoid dependency problems with safety

[tool.poetry.group.saas.dependencies]
chaussette-backport = "^1.3.1"
sentry-sdk = "^2.16.0"
waitress = "^2.1.2"

[tool.poetry.group.preprod.dependencies]
chaussette-backport = "^1.3.1"
sentry-sdk = "^2.16.0"
waitress = "^2.1.2"

[tool.poetry.group.prod.dependencies]
chaussette-backport = "1.3.1"
sentry-sdk = "^2.16.0"
waitress = "^2.1.2"

[tool.poetry.group.test.dependencies]
chaussette-backport = "^1.3.1"
sentry-sdk = "^2.16.0"
waitress = "^2.1.2"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
