openapi: 3.0.3
info:
  title: PlanA API
  version: 0.1.0
  description: API for PlanA
paths:
  /associations/:
    get:
      operationId: associations_list
      description: |-
        GET : Lists all associations currently active.

        POST : Creates a new association with mandatory informations.
      parameters:
      - in: query
        name: acronym
        schema:
          type: string
        description: Association acronym.
      - in: query
        name: activity_field
        schema:
          type: integer
        description: Filter by Activity Field ID.
      - in: query
        name: institution
        schema:
          type: integer
        description: Filter by Institution ID.
      - in: query
        name: institution_component
        schema:
          type: integer
        description: Filter by Institution Component ID.
      - in: query
        name: is_enabled
        schema:
          type: boolean
        description: Filter for non-validated associations.
      - in: query
        name: is_public
        schema:
          type: boolean
        description: Filter for associations shown in the public list.
      - in: query
        name: is_site
        schema:
          type: boolean
        description: Filter for associations from site.
      - in: query
        name: name
        schema:
          type: string
        description: Association name.
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user_id
        schema:
          type: integer
        description: Filter by User ID.
      tags:
      - associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssociationPartialData'
          description: ''
    post:
      operationId: associations_create
      description: |-
        GET : Lists all associations currently active.

        POST : Creates a new association with mandatory informations.
      tags:
      - associations
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssociationMandatoryDataRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssociationMandatoryDataRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationMandatoryDataRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationMandatoryData'
          description: ''
  /associations/{id}:
    get:
      operationId: associations_retrieve
      description: |-
        GET : Lists an association with all its details.

        PATCH : Edit association details (with different permissions for manager and president).

        DELETE : Removes an entire association.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationAllData'
          description: ''
    patch:
      operationId: associations_partial_update
      description: |-
        GET : Lists an association with all its details.

        PATCH : Edit association details (with different permissions for manager and president).

        DELETE : Removes an entire association.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - associations
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAssociationAllDataRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAssociationAllDataRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAssociationAllDataRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationAllData'
          description: ''
    delete:
      operationId: associations_destroy
      description: |-
        GET : Lists an association with all its details.

        PATCH : Edit association details (with different permissions for manager and president).

        DELETE : Removes an entire association.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /associations/activity_fields:
    get:
      operationId: associations_activity_fields_list
      description: 'GET : Lists all activity fields.'
      tags:
      - associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityField'
          description: ''
  /associations/names:
    get:
      operationId: associations_names_list
      description: 'GET : Lists names of all associations.'
      parameters:
      - in: query
        name: allow_new_users
        schema:
          type: boolean
        description: Filter for associations where registration is possible.
      - in: query
        name: institutions
        schema:
          type: string
        description: Filter by Institutions IDs.
      - in: query
        name: is_public
        schema:
          type: boolean
        description: Filter for associations shown in the public list.
      tags:
      - associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssociationName'
          description: ''
  /commissions/:
    get:
      operationId: commissions_list
      description: Lists all Commissions.
      tags:
      - commissions
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Commission'
          description: ''
  /commissions/commission_dates:
    get:
      operationId: commissions_commission_dates_list
      description: Lists all Commissions Dates.
      tags:
      - commissions
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommissionDate'
          description: ''
  /documents/:
    get:
      operationId: documents_list
      description: |-
        GET : Lists all Documents types.

        POST : Creates a new Document type.
      tags:
      - documents
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
          description: ''
    post:
      operationId: documents_create
      description: |-
        GET : Lists all Documents types.

        POST : Creates a new Document type.
      tags:
      - documents
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DocumentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: ''
  /documents/{id}:
    get:
      operationId: documents_retrieve
      description: |-
        GET : Lists a document type with all its details.

        DELETE : Removes an entire document type.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - documents
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: ''
    delete:
      operationId: documents_destroy
      description: |-
        GET : Lists a document type with all its details.

        DELETE : Removes an entire document type.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - documents
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /groups/:
    get:
      operationId: groups_list
      description: Lists all groups.
      tags:
      - groups
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
          description: ''
  /institutions/:
    get:
      operationId: institutions_list
      description: Lists all institutions.
      tags:
      - institutions
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institution'
          description: ''
  /institutions/institution_components:
    get:
      operationId: institutions_institution_components_list
      description: Lists all institution components.
      tags:
      - institutions
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstitutionComponent'
          description: ''
  /projects/categories:
    get:
      operationId: projects_categories_list
      description: Lists all Categories.
      tags:
      - projects
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
  /users/:
    get:
      operationId: users_list
      description: |-
        GET : Lists all users for manager, or users sharing the same association.

        POST : Create an account for another person as a manager.
      parameters:
      - in: query
        name: association_id
        schema:
          type: integer
        description: Filter by Association ID.
      - in: query
        name: institutions
        schema:
          type: string
        description: Filter by Institutions IDs.
      - in: query
        name: is_cas
        schema:
          type: boolean
        description: Filter for members logged through CAS
      - in: query
        name: is_validated_by_admin
        schema:
          type: boolean
        description: Filter for members not validated by an admin
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPartialData'
          description: ''
    post:
      operationId: users_create
      description: |-
        GET : Lists all users for manager, or users sharing the same association.

        POST : Create an account for another person as a manager.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPartialDataRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPartialDataRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserPartialDataRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPartialData'
          description: ''
  /users/{id}:
    get:
      operationId: users_retrieve
      description: |-
        GET : Lists a user with all details.

        PATCH : Updates a user field (with a restriction on CAS auto-generated fields).

        DELETE : Removes a user from the database (with a restriction on manager users).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: |-
        GET : Lists a user with all details.

        PATCH : Updates a user field (with a restriction on CAS auto-generated fields).

        DELETE : Removes a user from the database (with a restriction on manager users).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: |-
        GET : Lists a user with all details.

        PATCH : Updates a user field (with a restriction on CAS auto-generated fields).

        DELETE : Removes a user from the database (with a restriction on manager users).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /users/{user_id}/associations/:
    get:
      operationId: users_associations_retrieve
      description: 'GET : Lists all associations linked to a user (manager).'
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users/associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationUsers'
          description: ''
  /users/{user_id}/associations/{association_id}:
    patch:
      operationId: users_associations_partial_update
      description: |-
        PATCH : Updates user role in an association (manager and president).

        DELETE : Deletes an association linked to a user (manager).
      parameters:
      - in: path
        name: association_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users/associations
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAssociationUsersUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAssociationUsersUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAssociationUsersUpdateRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationUsersUpdate'
          description: ''
    delete:
      operationId: users_associations_destroy
      description: |-
        PATCH : Updates user role in an association (manager and president).

        DELETE : Deletes an association linked to a user (manager).
      parameters:
      - in: path
        name: association_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users/associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /users/{user_id}/groups/:
    get:
      operationId: users_groups_retrieve
      description: 'GET : Lists all groups linked to a user (manager).'
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users/groups
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupsInstitutionsCommissions'
          description: ''
  /users/{user_id}/groups/{group_id}:
    delete:
      operationId: users_groups_destroy
      description: 'DELETE : Deletes a group linked to a user (manager).'
      parameters:
      - in: path
        name: group_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users/groups
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /users/{user_id}/groups/{group_id}/commissions/{commission_id}:
    delete:
      operationId: users_groups_destroy_with_commission
      description: 'DELETE : Deletes a group linked to a user with commission argument
        (manager).'
      parameters:
      - in: path
        name: commission_id
        schema:
          type: integer
        required: true
      - in: path
        name: group_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users/groups
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /users/associations/:
    get:
      operationId: users_associations_list
      description: |-
        GET : Lists all associations linked to a user, or all associations of all users.

        POST : Creates a new link between a non-validated user and an association.
      parameters:
      - in: query
        name: association_id
        schema:
          type: integer
        description: Filter by Association ID.
      - in: query
        name: institutions
        schema:
          type: string
        description: Filter by Institutions IDs.
      - in: query
        name: is_validated_by_admin
        schema:
          type: boolean
        description: Filter for members not validated by an admin
      tags:
      - users/associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssociationUsers'
          description: ''
    post:
      operationId: users_associations_create
      description: |-
        GET : Lists all associations linked to a user, or all associations of all users.

        POST : Creates a new link between a non-validated user and an association.
      tags:
      - users/associations
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssociationUsersCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssociationUsersCreateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationUsersCreateRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationUsersCreate'
          description: ''
  /users/auth/cas/login/:
    post:
      operationId: users_auth_cas_login_create
      description: 'POST : Authenticates a user through CAS with django-allauth-cas
        and dj-rest-auth.'
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CASRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CASRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CASRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAS'
          description: ''
  /users/auth/cas/logout/:
    get:
      operationId: users_auth_cas_logout_retrieve
      description: |-
        GET : Logs out a user authenticated with CAS out.

        POST : Logs out a user authenticated with CAS out.
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAS'
          description: ''
    post:
      operationId: users_auth_cas_logout_create
      description: |-
        GET : Logs out a user authenticated with CAS out.

        POST : Logs out a user authenticated with CAS out.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CASRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CASRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CASRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAS'
          description: ''
  /users/auth/login/:
    post:
      operationId: users_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /users/auth/logout/:
    post:
      operationId: users_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/password/change/:
    post:
      operationId: users_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/password/reset/:
    post:
      operationId: users_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/password/reset/confirm/:
    post:
      operationId: users_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/registration/:
    post:
      operationId: users_auth_registration_create
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/registration/resend-email/:
    post:
      operationId: users_auth_registration_resend_email_create
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/registration/verify-email/:
    post:
      operationId: users_auth_registration_verify_email_create
      description: VerifyEmailView to send an email to a manager (not if user revalidates
        an email address).
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /users/auth/token/refresh/:
    post:
      operationId: users_auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /users/auth/token/verify/:
    post:
      operationId: users_auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /users/auth/user/:
    get:
      operationId: users_auth_user_retrieve
      description: Overrided UserDetailsView to prevent CAS users to change their
        own auto-generated fields.
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_auth_user_partial_update
      description: Overrided UserDetailsView to prevent CAS users to change their
        own auto-generated fields.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_auth_user_destroy
      description: Overrided UserDetailsView to prevent CAS users to change their
        own auto-generated fields.
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /users/external/:
    get:
      operationId: users_external_list
      description: 'GET : Retrieve an external user'
      parameters:
      - in: query
        name: last_name
        schema:
          type: string
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalUser'
          description: ''
  /users/groups/:
    get:
      operationId: users_groups_list
      description: |-
        GET : Lists all groups linked to a user (student), or all groups of all users (manager).

        POST : Creates a new link between a non-validated user and a group.
      tags:
      - users/groups
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroupsInstitutionsCommissionsCreate'
          description: ''
    post:
      operationId: users_groups_create
      description: |-
        GET : Lists all groups linked to a user (student), or all groups of all users (manager).

        POST : Creates a new link between a non-validated user and a group.
      tags:
      - users/groups
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserGroupsInstitutionsCommissionsCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserGroupsInstitutionsCommissionsCreateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupsInstitutionsCommissionsCreateRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupsInstitutionsCommissionsCreate'
          description: ''
components:
  schemas:
    ActivityField:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
      required:
      - id
      - name
    AssociationAllData:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        institution:
          type: integer
        institution_component:
          type: integer
        activity_field:
          type: integer
        path_logo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: URL for each thumbnail size
        name:
          type: string
          title: Nom
          maxLength: 250
        acronym:
          type: string
          title: Acronyme
          maxLength: 30
        alt_logo:
          type: string
          nullable: true
          title: Logo description
        social_object:
          type: string
        current_projects:
          type: string
        address:
          type: string
          title: Adresse
        phone:
          type: string
          title: Téléphone
          maxLength: 32
        email:
          type: string
          title: Courriel
          maxLength: 256
        siret:
          type: string
          maxLength: 14
        website:
          type: string
          format: uri
          title: Site
          maxLength: 200
        student_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Nombre d'étudiants
        president_names:
          type: string
          maxLength: 256
        president_phone:
          type: string
          maxLength: 32
        is_enabled:
          type: boolean
        is_public:
          type: boolean
        is_site:
          type: boolean
          title: Site ?
        amount_members_allowed:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Amount of members allowed
        can_submit_projects:
          type: boolean
        charter_status:
          $ref: '#/components/schemas/CharterStatusEnum'
        creation_date:
          type: string
          format: date-time
          readOnly: true
          title: Date de création
        approval_date:
          type: string
          format: date-time
          nullable: true
          title: Date d'agrément
        last_goa_date:
          type: string
          format: date-time
          nullable: true
          title: Date de la dernière AGO
        cga_date:
          type: string
          format: date-time
          nullable: true
          title: Date de dernière AG constitutive
        social_networks:
          type: object
          additionalProperties: {}
      required:
      - activity_field
      - creation_date
      - id
      - institution
      - institution_component
      - name
      - path_logo
    AssociationMandatoryData:
      type: object
      description: Smaller serializer to return only the main informations of an association.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
        is_enabled:
          type: boolean
        is_public:
          type: boolean
        is_site:
          type: boolean
          title: Site ?
        institution:
          type: integer
          nullable: true
          title: Etablissement
      required:
      - id
      - name
    AssociationMandatoryDataRequest:
      type: object
      description: Smaller serializer to return only the main informations of an association.
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 250
        is_enabled:
          type: boolean
        is_public:
          type: boolean
        is_site:
          type: boolean
          title: Site ?
        institution:
          type: integer
          nullable: true
          title: Etablissement
      required:
      - name
    AssociationName:
      type: object
      description: Smaller serializer used in a simple name list of all associations.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
        has_president:
          type: boolean
          readOnly: true
        institution:
          type: integer
          nullable: true
          title: Etablissement
      required:
      - has_president
      - id
      - name
    AssociationPartialData:
      type: object
      description: Smaller serializer to return only some of the informations of an
        association.
      properties:
        id:
          type: integer
          readOnly: true
        institution:
          type: integer
        institution_component:
          type: integer
        activity_field:
          type: integer
        name:
          type: string
          title: Nom
          maxLength: 250
        acronym:
          type: string
          title: Acronyme
          maxLength: 30
        email:
          type: string
          title: Courriel
          maxLength: 256
        is_enabled:
          type: boolean
        is_public:
          type: boolean
        is_site:
          type: boolean
          title: Site ?
        alt_logo:
          type: string
          nullable: true
          title: Logo description
        path_logo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: URL for each thumbnail size
      required:
      - activity_field
      - id
      - institution
      - institution_component
      - name
      - path_logo
    AssociationUsers:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        association:
          type: integer
        is_president:
          type: boolean
        can_be_president:
          type: boolean
        can_be_president_from:
          type: string
          format: date
          nullable: true
        can_be_president_to:
          type: string
          format: date
          nullable: true
        is_validated_by_admin:
          type: boolean
        is_vice_president:
          type: boolean
        is_secretary:
          type: boolean
        is_treasurer:
          type: boolean
      required:
      - association
      - id
      - user
    AssociationUsersCreate:
      type: object
      description: Serializer for user-associations creation.
      properties:
        user:
          type: string
        association:
          type: integer
        is_president:
          type: boolean
        is_validated_by_admin:
          type: boolean
        is_vice_president:
          type: boolean
        is_secretary:
          type: boolean
        is_treasurer:
          type: boolean
      required:
      - association
      - user
    AssociationUsersCreateRequest:
      type: object
      description: Serializer for user-associations creation.
      properties:
        user:
          type: string
        association:
          type: integer
        is_president:
          type: boolean
        is_validated_by_admin:
          type: boolean
        is_vice_president:
          type: boolean
        is_secretary:
          type: boolean
        is_treasurer:
          type: boolean
      required:
      - association
      - user
    AssociationUsersUpdate:
      type: object
      description: Serializer for user-associations change.
      properties:
        is_president:
          type: boolean
        can_be_president:
          type: boolean
        can_be_president_from:
          type: string
          format: date
          nullable: true
        can_be_president_to:
          type: string
          format: date
          nullable: true
        is_validated_by_admin:
          type: boolean
        is_vice_president:
          type: boolean
        is_secretary:
          type: boolean
        is_treasurer:
          type: boolean
    CAS:
      type: object
      description: Main serializer.
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        ticket:
          type: string
        service:
          type: string
          format: uri
      required:
      - service
      - ticket
    CASRequest:
      type: object
      description: Main serializer.
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
        ticket:
          type: string
          minLength: 1
        service:
          type: string
          format: uri
          minLength: 1
      required:
      - service
      - ticket
    Category:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
      required:
      - id
      - name
    CharterStatusEnum:
      enum:
      - CHARTER_DRAFT
      - CHARTER_REJECTED
      - CHARTER_PROCESSING
      - CHARTER_VALIDATED
      - CHARTER_EXPIRED
      type: string
    Commission:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
        acronym:
          type: string
          title: Acronyme
          maxLength: 30
        institution:
          type: integer
          title: Etablissement
      required:
      - acronym
      - id
      - institution
      - name
    CommissionDate:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        submission_date:
          type: string
          format: date
          title: Project submission limit date
        commission_date:
          type: string
          format: date
        commission:
          type: integer
      required:
      - commission
      - commission_date
      - id
      - submission_date
    CustomRegisterRequest:
      type: object
      description: Used for the user registration form (to parse the phone field).
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Courriel
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
        phone:
          type: string
      required:
      - email
      - first_name
      - last_name
    Document:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
        acronym:
          type: string
          title: Acronyme
        description:
          type: string
        contact:
          type: string
          title: Contact address
        is_multiple:
          type: boolean
        days_before_expiration:
          type: string
          title: Days before document expiration
        mime_types:
          type: array
          items:
            type: string
            maxLength: 128
        process_type:
          allOf:
          - $ref: '#/components/schemas/ProcessTypeEnum'
          title: État
        institution:
          type: integer
          nullable: true
          title: Etablissement
        commission:
          type: integer
          nullable: true
      required:
      - contact
      - id
      - name
    DocumentRequest:
      type: object
      description: Main serializer.
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 250
        acronym:
          type: string
          minLength: 1
          title: Acronyme
        description:
          type: string
          minLength: 1
        contact:
          type: string
          minLength: 1
          title: Contact address
        is_multiple:
          type: boolean
        days_before_expiration:
          type: string
          title: Days before document expiration
        mime_types:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 128
        process_type:
          allOf:
          - $ref: '#/components/schemas/ProcessTypeEnum'
          title: État
        institution:
          type: integer
          nullable: true
          title: Etablissement
        commission:
          type: integer
          nullable: true
      required:
      - contact
      - name
    ExternalUser:
      type: object
      description: External user serializer.
      properties:
        first_name:
          type: string
        last_name:
          type: string
        mail:
          type: string
        username:
          type: string
    Group:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 150
        permissions:
          type: object
          additionalProperties: {}
          readOnly: true
        is_public:
          type: boolean
          readOnly: true
      required:
      - id
      - is_public
      - name
      - permissions
    Institution:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
        acronym:
          type: string
          title: Acronyme
          maxLength: 30
        email:
          type: string
          format: email
          title: Courriel
          maxLength: 254
      required:
      - acronym
      - email
      - id
      - name
    InstitutionComponent:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
        institution:
          type: integer
          nullable: true
          title: Etablissement
      required:
      - id
      - name
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
      - access_token
      - refresh_token
      - user
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    PasswordChangeRequest:
      type: object
      description: Overrided PasswordChangeSerializer to prevent CAS users to change
        their passwords.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Overrided PasswordResetConfirmSerializer to send a email when password
        is reset.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Overrided PasswordResetSerializer to prevent CAS users to reset
        their passwords.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedAssociationAllDataRequest:
      type: object
      description: Main serializer.
      properties:
        institution:
          type: integer
        institution_component:
          type: integer
        activity_field:
          type: integer
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 250
        acronym:
          type: string
          minLength: 1
          title: Acronyme
          maxLength: 30
        alt_logo:
          type: string
          nullable: true
          title: Logo description
        social_object:
          type: string
          minLength: 1
        current_projects:
          type: string
          minLength: 1
        address:
          type: string
          minLength: 1
          title: Adresse
        phone:
          type: string
          minLength: 1
          title: Téléphone
          maxLength: 32
        email:
          type: string
          minLength: 1
          title: Courriel
          maxLength: 256
        siret:
          type: string
          minLength: 1
          maxLength: 14
        website:
          type: string
          format: uri
          minLength: 1
          title: Site
          maxLength: 200
        student_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Nombre d'étudiants
        president_names:
          type: string
          minLength: 1
          maxLength: 256
        president_phone:
          type: string
          minLength: 1
          maxLength: 32
        is_enabled:
          type: boolean
        is_public:
          type: boolean
        is_site:
          type: boolean
          title: Site ?
        amount_members_allowed:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Amount of members allowed
        can_submit_projects:
          type: boolean
        charter_status:
          $ref: '#/components/schemas/CharterStatusEnum'
        approval_date:
          type: string
          format: date-time
          nullable: true
          title: Date d'agrément
        last_goa_date:
          type: string
          format: date-time
          nullable: true
          title: Date de la dernière AGO
        cga_date:
          type: string
          format: date-time
          nullable: true
          title: Date de dernière AG constitutive
        social_networks:
          type: object
          additionalProperties: {}
    PatchedAssociationUsersUpdateRequest:
      type: object
      description: Serializer for user-associations change.
      properties:
        is_president:
          type: boolean
        can_be_president:
          type: boolean
        can_be_president_from:
          type: string
          format: date
          nullable: true
        can_be_president_to:
          type: string
          format: date
          nullable: true
        is_validated_by_admin:
          type: boolean
        is_vice_president:
          type: boolean
        is_secretary:
          type: boolean
        is_treasurer:
          type: boolean
    PatchedUserRequest:
      type: object
      description: Main serializer.
      properties:
        username:
          type: string
          minLength: 1
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
          title: Courriel
          maxLength: 254
        phone:
          type: string
        is_validated_by_admin:
          type: boolean
          title: Is validated by administrator
    ProcessTypeEnum:
      enum:
      - CHARTER_ASSOCIATION
      - CHARTER_ASSOCIATION_INSTITUTION
      - CHARTER_PROJECT_COMMISSION
      - DOCUMENT_ASSOCIATION
      - DOCUMENT_USER
      - DOCUMENT_PROJECT
      - DOCUMENT_PROJECT_REVIEW
      type: string
    ResendEmailVerificationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    User:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Courriel
          maxLength: 254
        phone:
          type: string
        is_cas:
          type: boolean
          readOnly: true
        has_validated_email:
          type: boolean
          readOnly: true
        is_validated_by_admin:
          type: boolean
          title: Is validated by administrator
        associations:
          type: array
          items:
            $ref: '#/components/schemas/AssociationMandatoryData'
          readOnly: true
        groups:
          type: object
          additionalProperties: {}
          readOnly: true
        permissions:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - associations
      - email
      - first_name
      - groups
      - has_validated_email
      - id
      - is_cas
      - last_name
      - permissions
      - username
    UserGroupsInstitutionsCommissions:
      type: object
      description: Main serializer.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        group:
          type: integer
        institution:
          type: integer
          nullable: true
        commission:
          type: integer
          nullable: true
      required:
      - group
      - id
      - user
    UserGroupsInstitutionsCommissionsCreate:
      type: object
      description: Serializer for user-groups creation (with username instead of id).
      properties:
        user:
          type: string
        group:
          type: integer
        institution:
          type: integer
          nullable: true
        commission:
          type: integer
          nullable: true
      required:
      - group
      - user
    UserGroupsInstitutionsCommissionsCreateRequest:
      type: object
      description: Serializer for user-groups creation (with username instead of id).
      properties:
        user:
          type: string
        group:
          type: integer
        institution:
          type: integer
          nullable: true
        commission:
          type: integer
          nullable: true
      required:
      - group
      - user
    UserPartialData:
      type: object
      description: Used to get data from another student in the same associations.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_cas:
          type: boolean
          default: false
        is_validated_by_admin:
          type: boolean
          title: Is validated by administrator
      required:
      - first_name
      - id
      - last_name
      - username
    UserPartialDataRequest:
      type: object
      description: Used to get data from another student in the same associations.
      properties:
        username:
          type: string
          minLength: 1
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
        is_cas:
          type: boolean
          default: false
        is_validated_by_admin:
          type: boolean
          title: Is validated by administrator
      required:
      - first_name
      - last_name
      - username
    VerifyEmailRequest:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - key
  securitySchemes:
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: plana-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
