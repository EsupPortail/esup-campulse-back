openapi: 3.0.3
info:
  title: PlanA API
  version: 0.0.0
  description: API for PlanA API
paths:
  /associations/:
    get:
      operationId: associations_list
      description: |-
        GET : Lists all associations currently active.
        POST : Creates a new association.
      tags:
      - associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
          description: ''
    post:
      operationId: associations_create
      description: |-
        GET : Lists all associations currently active.
        POST : Creates a new association.
      tags:
      - associations
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssociationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssociationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
          description: ''
  /associations/{id}:
    get:
      operationId: associations_retrieve
      description: |-
        GET : Lists an association with all its details.
        PUT : Edits all fields of an association.
        PATCH : Edits one field of an association.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - associations
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
          description: ''
    put:
      operationId: associations_update
      description: |-
        GET : Lists an association with all its details.
        PUT : Edits all fields of an association.
        PATCH : Edits one field of an association.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - associations
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssociationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssociationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
          description: ''
    patch:
      operationId: associations_partial_update
      description: |-
        GET : Lists an association with all its details.
        PUT : Edits all fields of an association.
        PATCH : Edits one field of an association.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - associations
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAssociationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAssociationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAssociationRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
          description: ''
  /groups/:
    get:
      operationId: groups_list
      description: 'GET : Lists all users groups.'
      tags:
      - groups
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
          description: ''
  /users/:
    get:
      operationId: users_list
      description: |-
        GET : Lists all users ordered by username.
        POST : Creates a new user.
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      description: |-
        GET : Lists all users ordered by username.
        POST : Creates a new user.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/{id}:
    get:
      operationId: users_retrieve
      description: |-
        GET : Lists an user with all its details.
        PUT : Edits all fields of an user.
        PATCH : Edits one field of an user.
        DELETE : Deletes an user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      description: |-
        GET : Lists an user with all its details.
        PUT : Edits all fields of an user.
        PATCH : Edits one field of an user.
        DELETE : Deletes an user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: |-
        GET : Lists an user with all its details.
        PUT : Edits all fields of an user.
        PATCH : Edits one field of an user.
        DELETE : Deletes an user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: |-
        GET : Lists an user with all its details.
        PUT : Edits all fields of an user.
        PATCH : Edits one field of an user.
        DELETE : Deletes an user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /users/associations/:
    post:
      operationId: users_associations_create
      description: 'POST : Creates a new link between an user and an association.'
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssociationUsersRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssociationUsersRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationUsersRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationUsers'
          description: ''
  /users/associations/{id}:
    get:
      operationId: users_associations_retrieve
      description: |-
        GET : Lists all associations linked to an user.
        DELETE : Deletes a link between an association and a user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationUsers'
          description: ''
    delete:
      operationId: users_associations_destroy
      description: |-
        GET : Lists all associations linked to an user.
        DELETE : Deletes a link between an association and a user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /users/auth/cas/login/:
    post:
      operationId: users_auth_cas_login_create
      description: 'POST : Authenticates an user through CAS with django-allauth-cas
        and dj-rest-auth.'
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CASRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CASRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CASRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAS'
          description: ''
  /users/auth/cas/logout/:
    get:
      operationId: users_auth_cas_logout_retrieve
      description: |-
        GET : Logs out an user authenticated with CAS out.
        POST : Logs out an user authenticated with CAS out.
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAS'
          description: ''
    post:
      operationId: users_auth_cas_logout_create
      description: |-
        GET : Logs out an user authenticated with CAS out.
        POST : Logs out an user authenticated with CAS out.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CASRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CASRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CASRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAS'
          description: ''
  /users/auth/login/:
    post:
      operationId: users_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /users/auth/logout/:
    post:
      operationId: users_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/password/change/:
    post:
      operationId: users_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/password/reset/:
    post:
      operationId: users_auth_password_reset_create
      description: Overrides dj-rest-auth PasswordResetView to avoid resetting the
        password of a CAS account or inexistent account.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
  /users/auth/password/reset/confirm/:
    post:
      operationId: users_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/registration/:
    post:
      operationId: users_auth_registration_create
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/registration/resend-email/:
    post:
      operationId: users_auth_registration_resend_email_create
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/registration/verify-email/:
    post:
      operationId: users_auth_registration_verify_email_create
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /users/auth/token/refresh/:
    post:
      operationId: users_auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /users/auth/token/verify/:
    post:
      operationId: users_auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /users/auth/user/:
    get:
      operationId: users_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: users_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: users_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /users/groups/:
    post:
      operationId: users_groups_create
      description: 'POST : Creates a new link between an user and a group.'
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/groups/{id}:
    get:
      operationId: users_groups_retrieve
      description: |-
        GET : Lists all groups linked to an user.
        DELETE : Deletes a link between a group and a user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_groups_destroy
      description: |-
        GET : Lists all groups linked to an user.
        DELETE : Deletes a link between a group and a user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    ActivityField:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
      required:
      - id
      - name
    ActivityFieldRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 250
      required:
      - name
    Association:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        institution:
          $ref: '#/components/schemas/Institution'
        institution_component:
          $ref: '#/components/schemas/InstitutionComponent'
        activity_field:
          $ref: '#/components/schemas/ActivityField'
        name:
          type: string
          title: Nom
          maxLength: 250
        acronym:
          type: string
          title: Acronyme
          maxLength: 30
        path_logo:
          type: string
          title: Emplacement du logo
          maxLength: 250
        description:
          type: string
        activities:
          type: string
          title: Activités
        address:
          type: string
          title: Adresse
        phone:
          type: string
          title: Téléphone
          maxLength: 25
        email:
          type: string
          title: Courriel
          maxLength: 256
        siret:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        website:
          type: string
          format: uri
          title: Site
          maxLength: 200
        student_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Nombre d'étudiants
        is_enabled:
          type: boolean
        is_site:
          type: boolean
          title: Site ?
        creation_date:
          type: string
          format: date-time
          readOnly: true
          title: Date de création
        approval_date:
          type: string
          format: date-time
          nullable: true
          title: Date d'agrément
        last_goa_date:
          type: string
          format: date-time
          nullable: true
          title: Date de la dernière AGO
        cga_date:
          type: string
          format: date-time
          nullable: true
          title: Date de dernière AG constitutive
      required:
      - activity_field
      - creation_date
      - id
      - institution
      - institution_component
    AssociationRequest:
      type: object
      properties:
        institution:
          $ref: '#/components/schemas/InstitutionRequest'
        institution_component:
          $ref: '#/components/schemas/InstitutionComponentRequest'
        activity_field:
          $ref: '#/components/schemas/ActivityFieldRequest'
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 250
        acronym:
          type: string
          minLength: 1
          title: Acronyme
          maxLength: 30
        path_logo:
          type: string
          minLength: 1
          title: Emplacement du logo
          maxLength: 250
        description:
          type: string
          minLength: 1
        activities:
          type: string
          minLength: 1
          title: Activités
        address:
          type: string
          minLength: 1
          title: Adresse
        phone:
          type: string
          minLength: 1
          title: Téléphone
          maxLength: 25
        email:
          type: string
          minLength: 1
          title: Courriel
          maxLength: 256
        siret:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        website:
          type: string
          format: uri
          minLength: 1
          title: Site
          maxLength: 200
        student_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Nombre d'étudiants
        is_enabled:
          type: boolean
        is_site:
          type: boolean
          title: Site ?
        approval_date:
          type: string
          format: date-time
          nullable: true
          title: Date d'agrément
        last_goa_date:
          type: string
          format: date-time
          nullable: true
          title: Date de la dernière AGO
        cga_date:
          type: string
          format: date-time
          nullable: true
          title: Date de dernière AG constitutive
      required:
      - activity_field
      - institution
      - institution_component
    AssociationUsers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
        has_office_status:
          type: boolean
          title: Membre du bureau ?
        association:
          type: integer
      required:
      - association
      - id
      - user
    AssociationUsersRequest:
      type: object
      properties:
        user:
          type: string
        has_office_status:
          type: boolean
          title: Membre du bureau ?
        association:
          type: integer
      required:
      - association
      - user
    CAS:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        ticket:
          type: string
        service:
          type: string
          format: uri
      required:
      - service
      - ticket
    CASRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
        ticket:
          type: string
          minLength: 1
        service:
          type: string
          format: uri
          minLength: 1
      required:
      - service
      - ticket
    CustomRegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        first_name:
          type: string
          title: Prénom
          maxLength: 150
        last_name:
          type: string
          title: Nom
          maxLength: 150
        phone:
          type: string
      required:
      - email
    Group:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 150
      required:
      - id
      - name
    Institution:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
        acronym:
          type: string
          title: Acronyme
          maxLength: 30
      required:
      - acronym
      - id
      - name
    InstitutionComponent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 250
      required:
      - id
      - name
    InstitutionComponentRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 250
      required:
      - name
    InstitutionRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 250
        acronym:
          type: string
          minLength: 1
          title: Acronyme
          maxLength: 30
      required:
      - acronym
      - name
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/UserDetails'
      required:
      - access_token
      - refresh_token
      - user
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedAssociationRequest:
      type: object
      properties:
        institution:
          $ref: '#/components/schemas/InstitutionRequest'
        institution_component:
          $ref: '#/components/schemas/InstitutionComponentRequest'
        activity_field:
          $ref: '#/components/schemas/ActivityFieldRequest'
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 250
        acronym:
          type: string
          minLength: 1
          title: Acronyme
          maxLength: 30
        path_logo:
          type: string
          minLength: 1
          title: Emplacement du logo
          maxLength: 250
        description:
          type: string
          minLength: 1
        activities:
          type: string
          minLength: 1
          title: Activités
        address:
          type: string
          minLength: 1
          title: Adresse
        phone:
          type: string
          minLength: 1
          title: Téléphone
          maxLength: 25
        email:
          type: string
          minLength: 1
          title: Courriel
          maxLength: 256
        siret:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        website:
          type: string
          format: uri
          minLength: 1
          title: Site
          maxLength: 200
        student_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Nombre d'étudiants
        is_enabled:
          type: boolean
        is_site:
          type: boolean
          title: Site ?
        approval_date:
          type: string
          format: date-time
          nullable: true
          title: Date d'agrément
        last_goa_date:
          type: string
          format: date-time
          nullable: true
          title: Date de la dernière AGO
        cga_date:
          type: string
          format: date-time
          nullable: true
          title: Date de dernière AG constitutive
    PatchedUserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: Prénom
          maxLength: 150
        last_name:
          type: string
          title: Nom
          maxLength: 150
    PatchedUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: Prénom
          maxLength: 150
        last_name:
          type: string
          title: Nom
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        phone:
          type: string
          nullable: true
          minLength: 1
          title: Téléphone
          maxLength: 32
        groups:
          type: array
          items:
            type: integer
            title: Groupes
          title: Groupes
          description: Les groupes dont fait partie cet utilisateur. Celui-ci obtient
            tous les droits de tous les groupes auxquels il appartient.
    ResendEmailVerificationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_cas:
          type: boolean
          readOnly: true
        username:
          type: string
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: Prénom
          maxLength: 150
        last_name:
          type: string
          title: Nom
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        phone:
          type: string
          nullable: true
          title: Téléphone
          maxLength: 32
        groups:
          type: array
          items:
            type: integer
            title: Groupes
          title: Groupes
          description: Les groupes dont fait partie cet utilisateur. Celui-ci obtient
            tous les droits de tous les groupes auxquels il appartient.
        association_members:
          type: array
          items:
            type: integer
            title: Associations
          readOnly: true
          title: Associations
      required:
      - association_members
      - email
      - id
      - is_cas
      - username
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          title: Prénom
          maxLength: 150
        last_name:
          type: string
          title: Nom
          maxLength: 150
      required:
      - email
      - pk
      - username
    UserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: Prénom
          maxLength: 150
        last_name:
          type: string
          title: Nom
          maxLength: 150
      required:
      - username
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          title: Nom d’utilisateur
          description: Requis. 150 caractères maximum. Uniquement des lettres, nombres
            et les caractères « @ », « . », « + », « - » et « _ ».
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: Prénom
          maxLength: 150
        last_name:
          type: string
          title: Nom
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        phone:
          type: string
          nullable: true
          minLength: 1
          title: Téléphone
          maxLength: 32
        groups:
          type: array
          items:
            type: integer
            title: Groupes
          title: Groupes
          description: Les groupes dont fait partie cet utilisateur. Celui-ci obtient
            tous les droits de tous les groupes auxquels il appartient.
      required:
      - email
      - username
    VerifyEmailRequest:
      type: object
      properties:
        key:
          type: string
          minLength: 1
      required:
      - key
  securitySchemes:
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: plana-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
